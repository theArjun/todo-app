{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["listingItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","faTrash","Date","toDateString","duration","easing","App","addItem","preventDefault","newItem","state","currentItem","console","log","setState","message","filteredItems","filter","length","msg","handleInput","bind","this","now","class","onSubmit","placeholder","faPlus","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f8b176b4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ListItems.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport FlipMove from \"react-flip-move\";\n\nconst listingItems = (props) => {\n  const items = props.items;\n  const listItems = items.map((item) => {\n    return (\n      <div className=\"list\" key={item.key}>\n        <p>\n          <input\n            type=\"text\"\n            id={item.key}\n            value={item.text}\n            onChange={(e) => {\n              props.setUpdate(e.target.value, item.key);\n            }}\n          />\n          <span>\n            <FontAwesomeIcon\n              className=\"faicons\"\n              onClick={() => {\n                props.deleteItem(item.key);\n              }}\n              icon={faTrash}\n            />\n          </span>\n\n          <div className=\"date\">{new Date(item.key).toDateString()}</div>\n        </p>\n      </div>\n    );\n  });\n  return (\n    <div>\n      <FlipMove duration={300} easing=\"ease-in-out\">\n        {listItems}\n      </FlipMove>\n    </div>\n  );\n};\n\nexport default listingItems;\n","import React from \"react\";\nimport ListItems from \"./ListItems\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      message: \"You're all set up !\",\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n\n    // Bind to the constructor.\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  }\n\n  addItem = (e) => {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        message: \"\",\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  };\n\n  deleteItem = (key) => {\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\n    console.log(this.state.items.length);\n    let msg = \"\";\n    if (this.state.items.length < 2) {\n      msg = \"You're all set up !\";\n    }\n    this.setState({\n      message: msg,\n      items: filteredItems,\n    });\n  };\n\n  setUpdate(text, key) {\n    console.log(\"items:\" + this.state.items);\n    const items = this.state.items;\n    items.map((item) => {\n      if (item.key === key) {\n        console.log(item.key + \"    \" + key);\n        item.text = text;\n      }\n    });\n    this.setState({\n      items: items,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"hello\">\n            Hello <br /> Arjun !\n          </div>\n          <div className=\"taskCountMessage\">\n            You have{\" \"}\n            <span className=\"taskCount\">\n              {this.state.items.length} new task\n            </span>{\" \"}\n            today{\" \"}\n          </div>\n        </header>\n        <section>\n          <div className=\"listing\">\n            <div className=\"todo-title\">Todo</div>\n            <p class=\"message\">{this.state.message}</p>\n            <p>{this.state.items.text}</p>\n            <ListItems\n              items={this.state.items}\n              deleteItem={this.deleteItem}\n              setUpdate={this.setUpdate}\n            />\n          </div>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input\n              type=\"text\"\n              placeholder=\"Add new task\"\n              value={this.state.currentItem.text}\n              onChange={this.handleInput}\n            />\n            <button type=\"submit\">\n              <FontAwesomeIcon icon={faPlus} />\n            </button>\n          </form>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}